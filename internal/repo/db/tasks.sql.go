// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tasks.sql

package dbrepo

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllTasks = `-- name: GetAllTasks :many
SELECT
    tasks.id as id,
    tasks.uuid as uuid,
    tasks.name as name,
    tasks.description as description,
    tasks.status as status,
    tasks.due_date as due_date,
    tasks.order as task_order,
    categories.name as category_name
FROM tasks
LEFT JOIN categories
    ON tasks.category_id = categories.id
WHERE
    tasks.deleted_at IS NULL
ORDER BY task_order ASC
`

type GetAllTasksRow struct {
	ID           int32              `db:"id" json:"id"`
	Uuid         pgtype.UUID        `db:"uuid" json:"uuid"`
	Name         string             `db:"name" json:"name"`
	Description  *string            `db:"description" json:"description"`
	Status       interface{}        `db:"status" json:"status"`
	DueDate      pgtype.Timestamptz `db:"due_date" json:"due_date"`
	TaskOrder    int32              `db:"task_order" json:"task_order"`
	CategoryName *string            `db:"category_name" json:"category_name"`
}

func (q *Queries) GetAllTasks(ctx context.Context) ([]*GetAllTasksRow, error) {
	rows, err := q.db.Query(ctx, getAllTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []*GetAllTasksRow
	for rows.Next() {
		var i GetAllTasksRow
		if err := rows.Scan(
			&i.ID,
			&i.Uuid,
			&i.Name,
			&i.Description,
			&i.Status,
			&i.DueDate,
			&i.TaskOrder,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
