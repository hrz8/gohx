// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package dbrepo

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type TaskStatus string

const (
	TaskStatusOpen       TaskStatus = "open"
	TaskStatusInProgress TaskStatus = "in_progress"
	TaskStatusCompleted  TaskStatus = "completed"
	TaskStatusWontDo     TaskStatus = "wont_do"
)

func (e *TaskStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TaskStatus(s)
	case string:
		*e = TaskStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TaskStatus: %T", src)
	}
	return nil
}

type NullTaskStatus struct {
	TaskStatus TaskStatus `json:"task_status"`
	Valid      bool       `json:"valid"` // Valid is true if TaskStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTaskStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TaskStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TaskStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTaskStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TaskStatus), nil
}

type Categories struct {
	ID        int32     `db:"id" json:"id"`
	Uuid      uuid.UUID `db:"uuid" json:"uuid"`
	Name      string    `db:"name" json:"name"`
	DeletedAt time.Time `db:"deleted_at" json:"deleted_at"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type Tags struct {
	ID        int32     `db:"id" json:"id"`
	Uuid      uuid.UUID `db:"uuid" json:"uuid"`
	Name      string    `db:"name" json:"name"`
	Color     string    `db:"color" json:"color"`
	DeletedAt time.Time `db:"deleted_at" json:"deleted_at"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`
}

type Tasks struct {
	ID          int32      `db:"id" json:"id"`
	Uuid        uuid.UUID  `db:"uuid" json:"uuid"`
	CategoryID  int32      `db:"category_id" json:"category_id"`
	Name        string     `db:"name" json:"name"`
	Description *string    `db:"description" json:"description"`
	Status      TaskStatus `db:"status" json:"status"`
	DueDate     time.Time  `db:"due_date" json:"due_date"`
	DeletedAt   time.Time  `db:"deleted_at" json:"deleted_at"`
	CreatedAt   time.Time  `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time  `db:"updated_at" json:"updated_at"`
	Order       int32      `db:"order" json:"order"`
}

type TasksToTags struct {
	TaskID int32 `db:"task_id" json:"task_id"`
	TagID  int32 `db:"tag_id" json:"tag_id"`
}
